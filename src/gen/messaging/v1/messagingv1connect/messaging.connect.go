// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: messaging/v1/messaging.proto

package messagingv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/vl0000/gomessenger/gen/messaging/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MessagingServiceName is the fully-qualified name of the MessagingService service.
	MessagingServiceName = "messaging.v1.MessagingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessagingServiceSendDirectMessageProcedure is the fully-qualified name of the MessagingService's
	// SendDirectMessage RPC.
	MessagingServiceSendDirectMessageProcedure = "/messaging.v1.MessagingService/SendDirectMessage"
	// MessagingServiceGetDMsProcedure is the fully-qualified name of the MessagingService's GetDMs RPC.
	MessagingServiceGetDMsProcedure = "/messaging.v1.MessagingService/GetDMs"
)

// MessagingServiceClient is a client for the messaging.v1.MessagingService service.
type MessagingServiceClient interface {
	SendDirectMessage(context.Context, *connect.Request[v1.SendDirectMessageRequest]) (*connect.Response[v1.SendDirectMessageResponse], error)
	GetDMs(context.Context, *connect.Request[v1.GetDMsRequest]) (*connect.Response[v1.GetDMsResponse], error)
}

// NewMessagingServiceClient constructs a client for the messaging.v1.MessagingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessagingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MessagingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	messagingServiceMethods := v1.File_messaging_v1_messaging_proto.Services().ByName("MessagingService").Methods()
	return &messagingServiceClient{
		sendDirectMessage: connect.NewClient[v1.SendDirectMessageRequest, v1.SendDirectMessageResponse](
			httpClient,
			baseURL+MessagingServiceSendDirectMessageProcedure,
			connect.WithSchema(messagingServiceMethods.ByName("SendDirectMessage")),
			connect.WithClientOptions(opts...),
		),
		getDMs: connect.NewClient[v1.GetDMsRequest, v1.GetDMsResponse](
			httpClient,
			baseURL+MessagingServiceGetDMsProcedure,
			connect.WithSchema(messagingServiceMethods.ByName("GetDMs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// messagingServiceClient implements MessagingServiceClient.
type messagingServiceClient struct {
	sendDirectMessage *connect.Client[v1.SendDirectMessageRequest, v1.SendDirectMessageResponse]
	getDMs            *connect.Client[v1.GetDMsRequest, v1.GetDMsResponse]
}

// SendDirectMessage calls messaging.v1.MessagingService.SendDirectMessage.
func (c *messagingServiceClient) SendDirectMessage(ctx context.Context, req *connect.Request[v1.SendDirectMessageRequest]) (*connect.Response[v1.SendDirectMessageResponse], error) {
	return c.sendDirectMessage.CallUnary(ctx, req)
}

// GetDMs calls messaging.v1.MessagingService.GetDMs.
func (c *messagingServiceClient) GetDMs(ctx context.Context, req *connect.Request[v1.GetDMsRequest]) (*connect.Response[v1.GetDMsResponse], error) {
	return c.getDMs.CallUnary(ctx, req)
}

// MessagingServiceHandler is an implementation of the messaging.v1.MessagingService service.
type MessagingServiceHandler interface {
	SendDirectMessage(context.Context, *connect.Request[v1.SendDirectMessageRequest]) (*connect.Response[v1.SendDirectMessageResponse], error)
	GetDMs(context.Context, *connect.Request[v1.GetDMsRequest]) (*connect.Response[v1.GetDMsResponse], error)
}

// NewMessagingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessagingServiceHandler(svc MessagingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	messagingServiceMethods := v1.File_messaging_v1_messaging_proto.Services().ByName("MessagingService").Methods()
	messagingServiceSendDirectMessageHandler := connect.NewUnaryHandler(
		MessagingServiceSendDirectMessageProcedure,
		svc.SendDirectMessage,
		connect.WithSchema(messagingServiceMethods.ByName("SendDirectMessage")),
		connect.WithHandlerOptions(opts...),
	)
	messagingServiceGetDMsHandler := connect.NewUnaryHandler(
		MessagingServiceGetDMsProcedure,
		svc.GetDMs,
		connect.WithSchema(messagingServiceMethods.ByName("GetDMs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/messaging.v1.MessagingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessagingServiceSendDirectMessageProcedure:
			messagingServiceSendDirectMessageHandler.ServeHTTP(w, r)
		case MessagingServiceGetDMsProcedure:
			messagingServiceGetDMsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessagingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessagingServiceHandler struct{}

func (UnimplementedMessagingServiceHandler) SendDirectMessage(context.Context, *connect.Request[v1.SendDirectMessageRequest]) (*connect.Response[v1.SendDirectMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messaging.v1.MessagingService.SendDirectMessage is not implemented"))
}

func (UnimplementedMessagingServiceHandler) GetDMs(context.Context, *connect.Request[v1.GetDMsRequest]) (*connect.Response[v1.GetDMsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messaging.v1.MessagingService.GetDMs is not implemented"))
}
